/* Headers */
#include <stdio.h>                     /* for sprintf */

/*-----------------------------------------------------------------------------
 *  stm32f4 related libraries
 *-----------------------------------------------------------------------------*/
#include "stm32f4_system.h"
#include "stm32f4_evb.h"
#include "stm32f4_evb_lcd.h"           /* LCD */
#include "stm32f4_evb_i2c_ee.h"        /* I2C */
#include "stm32f4_evb_i2c_tsc.h"       /* Touch Screen */
#include "stm32f4_evb_sdio_sd.h"       /* SD Card */

/*-----------------------------------------------------------------------------
 *  TM Libraries
 *-----------------------------------------------------------------------------*/
#include "tm_stm32f4_gpio.h"
#include "tm_stm32f4_usart.h"
#include "tm_stm32f4_adc.h"
#include "tm_stm32f4_usb_vcp.h"        /* Usb cdc */


/*-----------------------------------------------------------------------------
 *  FreeRTOS
 *-----------------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "fonts.h"

#include "WM.h"                        /* emWin */

#include "main.h"


/*-----------------------------------------------------------------------------
 *  Some Defines
 *-----------------------------------------------------------------------------*/
#define LEDOn(led) TM_GPIO_SetPinHigh(GPIOF, led)
#define LED1 GPIO_PIN_7
#define LED2 GPIO_PIN_8
#define LED3 GPIO_PIN_9
#define LED4 GPIO_PIN_10


void init() {
    SystemInit();
    GPIO_Config();                     /* LED ... */
    TM_USB_VCP_Init();                 /* USB to Computer for debugging */
    STM324xG_LCD_Init();               /* LCD Screen */
    sEE_Init();                        /* I2C for TSC */
    TSC_Config();                      /* Touch Screen */
    GUI_Init();                        /* emWin */
}
/*=====================================================================================================*/
/*=====================================================================================================*/
static void _cbParent(WM_MESSAGE * pMsg) {
  switch (pMsg->MsgId) {
  case WM_PAINT:
    GUI_SetBkColor(GUI_BLUE);
    GUI_Clear();
    GUI_DispString("Parent window");
    break;
  }
}

static void _cbTool(WM_MESSAGE * pMsg) {
  switch (pMsg->MsgId) {
  case WM_PAINT:
    GUI_SetBkColor(GUI_RED);
    GUI_Clear();
    GUI_DispString("Tool window = %d\n");
    break;
  }
}
char s[40];
void MainTask(void) {
  WM_HWIN hTool, hParent;
  WM_TOOLTIP_HANDLE hToolTip;
  /*GUI_Init();*/
  WM_SetDesktopColor(GUI_GREEN);
  hParent = WM_CreateWindow(0, 50, 200, 150, WM_CF_SHOW, _cbParent, 0);
  hTool   = WM_CreateWindowAsChild(20, 20, 100, 50, hParent, WM_CF_SHOW, _cbTool, 0);
  hToolTip = WM_TOOLTIP_Create(hParent, NULL, 0);
  WM_TOOLTIP_AddTool(hToolTip, hTool, "I am a ToolTip");
  int a = 0;
TSC_STATE *tsc_info;
  while (1) {
    TM_GPIO_TogglePinValue(GPIOF, GPIO_PIN_9);
    tsc_info = TSC_TS_GetState();
    GUI_Clear();
    sprintf(s, "tick = %d , ( %d, %d, %d ) ", a++, tsc_info->X, tsc_info->Y, tsc_info->Z);
    GUI_DispString(s);
    /*GUI_Exec();*/
      /*vTaskDelay(1000);*/
    GUI_Delay(100);
  }
}

static void NVIC_Configuration();

int main( void )
{

    System_Init();
    /*RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;*/
    /*TM_GPIO_SetPinHigh(GPIOF, GPIO_PIN_10);*/
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_CRC, ENABLE);
    /*TM_USB_VCP_Init();*/
//    uwCRCValue = CRC_CalcBlockCRC((uint32_t *)aDataBuffer, 114);

    /*NVIC_Configuration();*/
    TM_GPIO_SetPinHigh(GPIOF, GPIO_PIN_10); 


    
    

    TM_GPIO_SetPinHigh(GPIOF, GPIO_PIN_9);
    TM_GPIO_SetPinHigh(GPIOF, GPIO_PIN_8);


    /*SD_Error Status;*/
  /*[>[>[>------------------------------ SD Init ---------------------------------- <]<]<]*/
  /*if((Status = SD_Init()) != SD_OK)*/
  /*{*/
    /*TM_GPIO_SetPinLow(GPIOF, GPIO_PIN_10); */
  /*}*/

    FATFS FatFs;
    //File object
    FIL fil;
    //Free and total space
    uint32_t total, free;
    
        TM_GPIO_SetPinLow(GPIOF, GPIO_Pin_10);
        TM_GPIO_SetPinLow(GPIOF, GPIO_Pin_9);
        TM_GPIO_SetPinHigh(GPIOF, GPIO_Pin_8);
        TM_GPIO_SetPinLow(GPIOF, GPIO_Pin_7);
 
    FRESULT res;
    if ((res = f_mount(&FatFs, "", 0)) == FR_OK) {
        //Mounted OK, turn on RED LED
        TM_GPIO_SetPinHigh(GPIOF, GPIO_Pin_10);
        /*f_mkfs("", 0, 0);*/
        
        //Try to open file
        if ((res = f_open(&fil, "1stfile.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE)) == FR_OK) {
            //File opened, turn off RED and turn on GREEN led
            
        TM_GPIO_SetPinHigh(GPIOF, GPIO_Pin_9);
            //If we put more than 0 characters (everything OK)
            char x[50];
            if (f_gets(x, 40, &fil)) {

            GUI_DispString(x);
                //Turn on both leds
            }
            
            //Close file, don't forget this!
            f_close(&fil);
        } else {
            char x[30];
            sprintf(x, "#2 Err = %d %d\n", res, FR_NOT_READY);
            GUI_DispString(x);
            int q = SD_Init();
            sprintf(x, "#3 Err = %d\n", q);
            GUI_DispString(x);

        }
        
        //Unmount drive, don't forget this!
        f_mount(0, "", 1);
    } else {
        char x[30];
        sprintf(x, "Err = %d %d\n", res, FR_NOT_READY);
        GUI_DispString(x);
        TM_GPIO_SetPinHigh(GPIOF, GPIO_Pin_7);
        while(1);
    }


    /*MainTask();*/
    /*while(1);*/
    /*uint8_t ret1 = xTaskCreate(blink2, "guimain", configMINIMAL_STACK_SIZE, NULL, 1, NULL);*/
    /*if (ret1 == pdTRUE) {*/
        /*vTaskStartScheduler();  // should never return*/
    /*}     */

    /*int cnt = 0;*/
    /*while (1) {*/
        /*char zz[20] = {};*/
        /*sprintf(zz, "Hello World! x%d\n", cnt);*/
        /*//GUI_DispString(zz);*/
        /*Delay_100ms(1);*/

        /*//GUI_DispString("Hello World!");*/
    /*}*/
    /*while (1) {*/
        /*blink();*/
    /*}*/
    //TM_USART_Init(USART2, TM_USART_PinsPack_1, 9600);
    /*TM_ADC_Init(ADC3, ADC_Channel_3);*/
    /*TM_ADC_EnableVbat();*/
    /*LCD_Clear(0xFFFF);*/
    /*LCD_SetTextColor(0x0000);*/
    /*LCD_DisplayStringLine(LCD_LINE_15, "Hello World!");*/

    // Windows_DrawMenu();
    uint8_t ret1 = xTaskCreate(blink1, "blink1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    uint8_t ret2 = xTaskCreate(MainTask, "blink2", 400, NULL, 1, NULL);

    if (ret1 == pdTRUE && ret2 == pdTRUE) {
        vTaskStartScheduler();  // should never return
    } else {
         // --TODO blink some LEDs to indicate fatal system error
    }
    

    for (;;);

    int a = 0;
    while(1){
        /* if(KEY_WAKE==1) {
           menu_select++;
           if(menu_select>4) menu_select = Menu_CONF;
           Windows_SelMenu(menu_select);
           Delay_100ms(1);
           }else if(KEY_TAMP==0) {
           menu_select--;
           if(menu_select<1) menu_select = Menu_CTRL;
           Windows_SelMenu(menu_select);
           Delay_100ms(1);
           }
           Windows_Interface(menu_select); */
        /*LED1 = ~LED1;*/
        /*LED2 = ~LED2;*/
        /*LED3 = ~LED3;*/
        /*LED1 = ~KEY_WAKE;*/
        /*LED2 = ~KEY_TAMP;*/
        /*LED3 = ~KEY;*/
        /*LED4 = ~LED4; */
        if (KEY_WAKE) {
            a = 0;
        } else if (!KEY_TAMP) {
            a += 1;
            Delay_10ms(3);
        } else if (!KEY) {
            a -= 1;
            Delay_10ms(3);
        }
        /*int c = a, b[4];*/
        /*for(int i=3; i>=0; i--) {*/
        /*b[i] = c&1; c >>= 1;*/
        /*}*/
        /*LED1 = b[0];*/
        /*LED2 = b[1];*/
        /*LED3 = b[2];*/
        /*LED4 = b[3];*/
        TM_GPIO_TogglePinValue(GPIOF, GPIO_PIN_10);
        TM_GPIO_TogglePinValue(GPIOF, GPIO_PIN_9);
        TM_GPIO_TogglePinValue(GPIOF, GPIO_PIN_8);
        TM_GPIO_TogglePinValue(GPIOF, GPIO_PIN_7);
        Delay_10ms(1);
    }
}

void blink() {
    TM_GPIO_TogglePinValue(GPIOF, GPIO_PIN_7);
    Delay_10ms(1);
}

int a = 0;
void blink1(void* p) {
    for (;;) {
        //TM_GPIO_TogglePinValue(GPIOF, GPIO_PIN_10);
        blink();
        // TODO some other test
        vTaskDelay(1000);
        /*TM_USART_Puts(USART1, "Hello world\n");*/
        /*char c[20];*/
        /*sprintf(c, "Hello %d", a++);*/
        /*LCD_DisplayStringLine(LCD_LINE_15, c);*/
    }
    vTaskDelete(NULL);
}

void blink2(void* p) {
    for (;;) {
        TM_GPIO_TogglePinValue(GPIOF, GPIO_PIN_9);
        // TODO some other test
        vTaskDelay(1500);
    }
    vTaskDelete(NULL);
}

void GPIO_Config( void )
{
    TM_GPIO_Init(GPIOF, 
            GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_7, 
            TM_GPIO_Mode_OUT, 
            TM_GPIO_OType_PP, 
            TM_GPIO_PuPd_NOPULL, 
            TM_GPIO_Speed_High);  
    /*
       GPIO_InitTypeDef GPIO_InitStruct;

       RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC|RCC_AHB1Periph_GPIOI|
       RCC_AHB1Periph_GPIOA|RCC_AHB1Periph_GPIOF, ENABLE);

       GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_9 | GPIO_Pin_8 | GPIO_Pin_7;
       GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
       GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
       GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
       GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
       GPIO_Init(GPIOF, &GPIO_InitStruct);

       GPIO_InitStruct.GPIO_Pin = GPIO_Pin_13;
       GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
       GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
       GPIO_Init(GPIOC, &GPIO_InitStruct);
       GPIO_InitStruct.GPIO_Pin = GPIO_Pin_8;
       GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
       GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
       GPIO_Init(GPIOI, &GPIO_InitStruct);
       GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
       GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
       GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
       GPIO_Init(GPIOA, &GPIO_InitStruct);

       LED1 = 0;
       LED2 = 0;
       LED3 = 0;
       LED4 = 0;
       */
}

void vApplicationTickHook(void) {
}

/* vApplicationMallocFailedHook() will only be called if
   configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h.  It is a hook
   function that will get called if a call to pvPortMalloc() fails.
   pvPortMalloc() is called internally by the kernel whenever a task, queue,
   timer or semaphore is created.  It is also called by various parts of the
   demo application.  If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
        void vApplicationMallocFailedHook(void) {
            taskDISABLE_INTERRUPTS();
            for(;;);
        }

/* vApplicationIdleHook() will only be called if configUSE_IDLE_HOOK is set
   to 1 in FreeRTOSConfig.h.  It will be called on each iteration of the idle
   task.  It is essential that code added to this hook function never attempts
   to block in any way (for example, call xQueueReceive() with a block time
   specified, or call vTaskDelay()).  If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
void vApplicationIdleHook(void) {
}

void vApplicationStackOverflowHook(xTaskHandle pxTask, signed char *pcTaskName) {
    (void) pcTaskName;
    (void) pxTask;
    /* Run time stack overflow checking is performed if
       configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
       function is called if a stack overflow is detected. */
    taskDISABLE_INTERRUPTS();
    for(;;);
}


static void NVIC_Configuration(void)
{
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Configure the NVIC Preemption Priority Bits */
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);

  NVIC_InitStructure.NVIC_IRQChannel = SDIO_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
  NVIC_InitStructure.NVIC_IRQChannel = SD_SDIO_DMA_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_Init(&NVIC_InitStructure);  
}
