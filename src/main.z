/* Headers */
#include <stdio.h>                     /* for sprintf */

/*-----------------------------------------------------------------------------
 *  stm32f4 related libraries
 *-----------------------------------------------------------------------------*/
#include "stm32f4_system.h"
#include "stm32f4_evb.h"
#include "stm32f4xx_rcc.h"
/*#include "stm32f4_evb_lcd.h"           [> LCD <]*/
/*#include "stm32f4_evb_i2c_ee.h"        [> I2C <]*/
/*#include "stm32f4_evb_i2c_tsc.h"       [> Touch Screen <]*/
/*#include "stm32f4_evb_sdio_sd.h"       [> SD Card <]*/

/*-----------------------------------------------------------------------------
 *  TM Libraries
 *-----------------------------------------------------------------------------*/
#include "tm_stm32f4_gpio.h"
#include "tm_stm32f4_usart.h"
/*#include "tm_stm32f4_adc.h"*/
/*#include "tm_stm32f4_usb_vcp.h"        [> Usb cdc <]*/


/*-----------------------------------------------------------------------------
 *  FreeRTOS
 *-----------------------------------------------------------------------------*/
/*#include "FreeRTOS.h"*/
/*#include "task.h"*/
/*#include "fonts.h"*/

/*#include "WM.h"                        [> emWin <]*/

/*#include "main.h"*/


/*-----------------------------------------------------------------------------
 *  Some Defines
 *-----------------------------------------------------------------------------*/
#define LEDOn(led) TM_GPIO_SetPinHigh(GPIOF, led)
#define LEDOff(led) TM_GPIO_SetPinLow(GPIOF, led)
#define LEDBlink(led) TM_GPIO_TogglePinValue(GPIOF, led)
#define LED1 GPIO_PIN_7
#define LED2 GPIO_PIN_8
#define LED3 GPIO_PIN_9
#define LED4 GPIO_PIN_10


void init() {
    SystemInit();
    GPIO_Config();                     /* LED ... */
}

static void USART_Config(void)
{
  USART_InitTypeDef USART_InitStructure;
  
  /* USARTx configured as follow:
        - BaudRate = 115200 baud  
        - Word Length = 8 Bits
        - One Stop Bit
        - No parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled
  */
  USART_InitStructure.USART_BaudRate = 115200;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

  STM_EVAL_COMInit(COM1, &USART_InitStructure);
}

int main()
{

    init();
    LEDOn(LED1);
    LEDOn(LED2);

    /*sleep(1000);*/
      USART_Config();


    while(1){
  USART_SendData(EVAL_COM1, "H");
        LEDBlink(LED3);
        uint16_t z = USART_ReceiveData(EVAL_COM1);
        if (z == "H") {
            LEDBlink(LED2);
        }
        sleep(1000);
    }

    LEDOff(LED2);

    /*GUI_DispString("OK!");*/

    uint8_t c;
    
    while(1) {
        LEDBlink(LED3);
    TM_USART_Puts(USART2, "Hello World\n");
        sleep(1000);
    }
}

void assert_failed(uint8_t* a, uint32_t b) {}

void GPIO_Config()
{
    TM_GPIO_Init(GPIOF, 
            GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_7, 
            TM_GPIO_Mode_OUT, 
            TM_GPIO_OType_PP, 
            TM_GPIO_PuPd_NOPULL, 
            TM_GPIO_Speed_High);  
}
